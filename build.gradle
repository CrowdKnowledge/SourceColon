defaultTasks 'all'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

import org.apache.tools.ant.filters.ReplaceTokens

configurations {
    jflex
}

repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    src          = new File(project.projectDir, 'src')
    dist         = new File(project.projectDir, 'dist')
    generatedsrc = new File(project.projectDir, 'generatedsrc')
    workingdirs  = [project.buildDir, generatedsrc, dist]
}

dependencies {
    String luceneVersion = '3.0.3'
    List common = [
            'org.apache.lucene:lucene-core:' + luceneVersion,
            'org.apache.lucene:lucene-spellchecker:' + luceneVersion,
            'org.apache.bcel:bcel:5.2',
            'org.apache.ant:ant:1.8.4'
    ]
    jflex 'de.jflex:maven-jflex-plugin:1.4.3'
    compile common
    compile 'javax.servlet:servlet-api:2.5'
    runtime common
    testCompile 'junit:junit:4.8.2'
}

task cleanup << {
    delete project.ext.workingdirs
}

task prepare << {
    project.ext.workingdirs.each {
        it.mkdirs()
    }
}

task jflex(dependsOn: prepare) << {
    ant.taskdef(name: 'jflex', classname: 'JFlex.anttask.JFlexTask', classpath: configurations.jflex.asPath)

    fileTree(dir: project.ext.src).include('**/*.lex').each {
        ant.jflex(destdir: project.ext.generatedsrc, file: it)
    }
}

compileJava {
    dependsOn jflex
}

clean {
    dependsOn cleanup
}

sourceSets {
    main {
        java {
            srcDir project.ext.src
            srcDir project.ext.generatedsrc
        }
    }
    test {
        java {
            srcDir new File(project.projectDir, '/test/java')
        }
        resources {
            srcDir project.ext.src
            srcDir new File(project.projectDir, '/test/java')
            srcDir new File(project.projectDir, '/test/data')
        }
    }
}

jar {
    destinationDir project.ext.dist
    manifest {
        attributes('Main-Class': 'org.opensolaris.opengrok.index.Indexer')
    }
    from configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
}

task runIndexer(dependsOn: jar) << {
    String target = project.ext.src.absolutePath
    if (project.hasProperty('target')) {
        if (file(project.target).isDirectory()) {
            target = project.target
        } else {
            logger.warn("${project.target} is not a directory. use $target as default.")
        }
    }

    ant.java(jar: jar.archivePath, fork: true) {
        arg(value: '-s')
        arg(value: target)
    }
}

task prepareWar(dependsOn: [jar, runIndexer]) << {
    File destWar = new File(project.buildDir, 'war')
    File baseWar = new File(project.projectDir, 'web')
    copy {
        from baseWar
        into destWar
    }
    copy {
        from jar.archivePath
        into new File(destWar, 'WEB-INF/lib')
    }
}

war {
    dependsOn prepareWar
    destinationDir project.ext.dist
    from new File(project.buildDir, 'war')
}

task all(dependsOn: [build, war, runIndexer]) {
}

task run(dependsOn: jettyRunWar) {    
}
