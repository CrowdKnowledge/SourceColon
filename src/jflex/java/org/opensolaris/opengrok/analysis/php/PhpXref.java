/* The following code was generated by JFlex 1.4.3 on 12/11/26 22:11 */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Cross reference a Php file
 */

package org.opensolaris.opengrok.analysis.php;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/11/26 22:11 from the specification file
 * <tt>/Users/takayuki/Workspace/SourceColon/src/main/java/org/opensolaris/opengrok/analysis/php/PhpXref.lex</tt>
 */
public class PhpXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int POD = 8;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int SCOMMENT = 4;
  public static final int QSTRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\6\1\52"+
    "\1\54\1\45\1\45\1\47\1\53\2\56\1\6\1\34\1\6\1\10"+
    "\1\11\1\27\1\30\1\42\1\42\1\14\1\14\5\5\1\57\1\6"+
    "\1\50\1\35\1\51\1\6\1\46\1\26\1\32\1\23\1\24\1\33"+
    "\1\25\1\37\1\13\1\21\1\4\1\36\1\20\1\17\1\22\1\40"+
    "\1\12\1\4\1\41\1\15\1\16\1\44\1\43\1\4\1\31\2\4"+
    "\1\56\1\55\2\56\1\7\1\56\1\26\1\32\1\23\1\24\1\33"+
    "\1\25\1\37\1\13\1\21\1\4\1\36\1\20\1\17\1\22\1\40"+
    "\1\12\1\4\1\41\1\15\1\16\1\44\1\43\1\4\1\31\2\4"+
    "\3\56\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\2\3\1\4\1\5\1\4\1\5"+
    "\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\4"+
    "\1\2\2\14\5\4\1\6\1\7\1\15\1\4\1\16"+
    "\2\4\1\17\1\5\25\0\1\20\1\21\1\0\1\22"+
    "\1\0\2\5\1\0\1\5\1\23\21\0\1\2\1\0"+
    "\1\5\4\0\1\24\10\0\1\25\13\0\1\26\2\0"+
    "\1\26\1\0\1\27\1\0\2\30\5\0\1\31\3\0"+
    "\1\32\3\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u0150\0\u01e0\0\u0210\0\u0150\0\u0240\0\u0270"+
    "\0\u0270\0\u02a0\0\u0150\0\u0150\0\u0150\0\u0150\0\u02d0\0\u0300"+
    "\0\u0330\0\u0150\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0150"+
    "\0\u0150\0\u0150\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u01e0\0\u0510"+
    "\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u0360\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0390\0\u0840\0\u0870\0\u08a0\0\u0150\0\u0150\0\u08d0"+
    "\0\u0150\0\u0900\0\u0930\0\u0960\0\u0960\0\u0990\0\u05d0\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40"+
    "\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0150\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0150"+
    "\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60"+
    "\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u0360"+
    "\0\u1260\0\u0fc0\0\u1290\0\u12c0\0\u0150\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u0150\0\u13e0\0\u1410\0\u1440\0\u0150\0\u1470"+
    "\0\u14a0\0\u14d0\0\u14d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\14"+
    "\2\16\2\14\1\15\12\14\1\16\1\17\3\14\2\16"+
    "\4\14\1\15\2\14\2\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\3\16\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\14\2\16\2\14\1\15\12\14\1\16"+
    "\1\17\3\14\1\16\1\27\4\14\1\15\2\14\2\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\3\16\1\10"+
    "\1\30\1\31\1\32\1\33\1\34\1\16\3\34\1\33"+
    "\1\35\1\34\10\33\1\36\1\33\1\37\1\34\3\33"+
    "\2\16\4\33\1\34\2\33\2\16\1\40\1\41\1\23"+
    "\1\42\2\16\1\43\2\16\1\10\1\30\1\31\1\32"+
    "\1\33\1\34\1\16\3\34\1\33\1\35\1\34\10\33"+
    "\1\36\1\33\1\37\1\34\3\33\2\16\4\33\1\34"+
    "\2\33\2\16\1\40\1\41\1\23\6\16\1\10\1\30"+
    "\1\31\1\32\1\33\1\34\1\16\3\34\1\33\1\35"+
    "\1\34\10\33\1\36\1\33\1\37\1\34\3\33\2\16"+
    "\4\33\1\34\2\33\2\16\1\40\1\41\1\23\1\16"+
    "\1\44\1\16\1\45\2\16\1\10\1\11\1\12\1\13"+
    "\1\33\1\34\1\16\3\34\1\33\1\35\1\34\10\33"+
    "\1\36\1\33\1\37\1\34\3\33\2\16\4\33\1\34"+
    "\2\33\2\16\1\40\1\41\1\23\6\16\1\10\1\11"+
    "\1\12\1\13\1\33\1\34\1\16\3\34\1\33\1\35"+
    "\1\34\10\33\1\36\1\33\1\37\1\34\3\33\1\16"+
    "\1\46\4\33\1\34\2\33\2\16\1\40\1\41\1\23"+
    "\6\16\61\0\1\11\1\12\1\13\57\0\1\13\60\0"+
    "\2\47\1\0\1\47\2\0\15\47\1\0\4\47\2\0"+
    "\7\47\20\0\1\15\1\0\1\50\1\0\1\51\2\0"+
    "\1\15\13\0\1\15\2\0\1\52\6\0\1\15\22\0"+
    "\1\15\1\0\1\50\1\0\1\51\2\0\1\15\13\0"+
    "\1\15\1\53\1\0\1\52\6\0\1\15\21\0\1\54"+
    "\2\0\1\54\2\0\2\54\1\0\12\54\2\0\3\54"+
    "\2\0\4\54\1\0\2\54\17\0\1\55\5\0\2\55"+
    "\1\0\12\55\1\56\1\0\3\55\2\0\4\55\1\0"+
    "\2\55\25\0\1\57\1\60\5\0\1\61\3\0\1\62"+
    "\4\0\1\63\1\64\4\0\1\65\20\0\1\30\1\31"+
    "\1\32\57\0\1\32\60\0\2\66\1\0\2\66\1\67"+
    "\15\66\1\70\4\66\2\0\7\66\1\0\1\71\15\0"+
    "\2\72\1\0\20\72\1\0\4\72\2\0\7\72\1\0"+
    "\1\71\15\0\2\66\1\0\2\66\1\67\4\66\1\73"+
    "\10\66\1\70\4\66\2\0\7\66\1\0\1\71\15\0"+
    "\2\66\1\0\2\66\1\67\4\66\1\74\10\66\1\70"+
    "\4\66\2\0\7\66\1\0\1\71\15\0\1\75\5\0"+
    "\2\75\1\0\12\75\2\0\3\75\2\0\4\75\1\0"+
    "\2\75\65\0\1\76\2\0\1\77\3\0\1\100\131\0"+
    "\1\101\1\0\1\77\25\0\1\102\41\0\1\50\1\0"+
    "\1\50\4\0\1\50\13\0\1\50\2\0\1\52\6\0"+
    "\1\50\22\0\1\103\6\0\1\103\13\0\1\103\11\0"+
    "\1\103\22\0\1\104\2\0\1\105\3\0\1\104\13\0"+
    "\1\104\3\0\1\105\5\0\1\104\22\0\1\106\6\0"+
    "\1\106\6\0\4\106\1\0\1\106\1\0\2\106\6\0"+
    "\1\106\21\0\2\107\1\0\1\107\2\0\15\107\1\0"+
    "\4\107\2\0\7\107\17\0\2\55\1\0\2\55\1\110"+
    "\15\55\1\111\4\55\2\0\7\55\17\0\1\112\5\0"+
    "\2\112\1\0\12\112\2\0\3\112\2\0\4\112\1\0"+
    "\2\112\53\0\1\113\52\0\1\114\42\0\1\115\101\0"+
    "\1\116\45\0\1\117\4\0\1\120\46\0\1\113\100\0"+
    "\1\121\20\0\2\66\1\0\2\66\1\67\1\122\6\66"+
    "\1\123\2\66\1\124\2\66\1\70\4\66\2\0\7\66"+
    "\1\0\1\71\15\0\1\125\5\0\2\125\1\0\12\125"+
    "\2\0\3\125\2\0\4\125\1\0\2\125\17\0\2\126"+
    "\1\0\20\126\1\0\4\126\2\0\7\126\17\0\2\66"+
    "\1\0\2\66\1\67\4\66\1\127\10\66\1\70\4\66"+
    "\2\0\7\66\1\0\1\71\15\0\2\66\1\0\2\66"+
    "\1\67\1\130\14\66\1\70\4\66\2\0\7\66\1\0"+
    "\1\71\15\0\2\75\1\0\20\75\1\70\4\75\2\0"+
    "\7\75\14\0\1\100\51\0\1\131\50\0\1\132\20\0"+
    "\1\103\6\0\1\103\13\0\1\103\2\0\1\52\6\0"+
    "\1\103\22\0\1\104\6\0\1\104\13\0\1\104\11\0"+
    "\1\104\22\0\1\106\6\0\1\106\6\0\4\106\1\0"+
    "\1\106\1\0\1\106\1\133\6\0\1\106\21\0\2\55"+
    "\1\0\2\55\1\110\1\134\6\55\1\135\2\55\1\136"+
    "\2\55\1\111\4\55\2\0\7\55\17\0\1\137\5\0"+
    "\2\137\1\0\12\137\2\0\3\137\2\0\4\137\1\0"+
    "\2\137\17\0\2\112\1\0\20\112\1\111\4\112\2\0"+
    "\7\112\37\0\1\140\61\0\1\141\64\0\1\142\65\0"+
    "\1\140\41\0\1\143\73\0\1\144\53\0\1\116\30\0"+
    "\2\66\1\0\2\66\1\67\1\66\1\145\12\66\1\146"+
    "\1\70\4\66\2\0\7\66\1\0\1\71\15\0\2\66"+
    "\1\0\2\66\1\67\10\66\1\147\4\66\1\70\4\66"+
    "\2\0\7\66\1\0\1\71\15\0\2\66\1\0\2\66"+
    "\1\67\7\66\1\150\5\66\1\70\4\66\2\0\7\66"+
    "\1\0\1\71\15\0\2\151\1\0\3\125\15\151\1\0"+
    "\4\151\2\0\7\151\17\0\2\126\1\0\2\126\1\152"+
    "\15\126\1\0\4\126\2\0\7\126\17\0\2\66\1\0"+
    "\2\66\1\67\1\153\14\66\1\70\4\66\2\0\7\66"+
    "\1\0\1\71\15\0\2\66\1\0\2\66\1\67\15\66"+
    "\1\70\4\66\2\0\7\66\1\0\1\71\10\0\1\154"+
    "\16\0\1\155\46\0\1\106\2\0\1\105\3\0\1\106"+
    "\6\0\4\106\1\0\1\106\1\0\1\106\1\133\1\105"+
    "\5\0\1\106\21\0\2\55\1\0\2\55\1\110\1\55"+
    "\1\156\12\55\1\157\1\111\4\55\2\0\7\55\17\0"+
    "\2\55\1\0\2\55\1\110\10\55\1\160\4\55\1\111"+
    "\4\55\2\0\7\55\17\0\2\55\1\0\2\55\1\110"+
    "\7\55\1\161\5\55\1\111\4\55\2\0\7\55\17\0"+
    "\2\162\1\0\3\137\15\162\1\0\4\162\2\0\7\162"+
    "\37\0\1\163\52\0\1\140\76\0\1\140\42\0\1\164"+
    "\42\0\2\66\1\0\2\66\1\67\1\165\3\66\1\166"+
    "\10\66\1\70\4\66\2\0\7\66\1\0\1\71\15\0"+
    "\2\66\1\0\2\66\1\67\4\66\1\167\10\66\1\70"+
    "\4\66\2\0\7\66\1\0\1\71\15\0\2\66\1\0"+
    "\2\66\1\67\11\66\1\170\3\66\1\70\4\66\2\0"+
    "\7\66\1\0\1\71\15\0\2\66\1\0\2\66\1\67"+
    "\13\66\1\171\1\66\1\70\4\66\2\0\7\66\1\0"+
    "\1\71\15\0\2\151\1\0\3\125\15\151\1\70\4\151"+
    "\2\0\7\151\17\0\2\172\1\0\20\172\1\0\4\172"+
    "\2\0\7\172\17\0\2\66\1\0\2\66\1\67\3\66"+
    "\1\130\11\66\1\70\4\66\2\0\7\66\1\0\1\71"+
    "\10\0\1\154\27\0\1\173\30\0\2\155\1\174\1\175"+
    "\54\155\4\0\2\55\1\0\2\55\1\110\1\176\3\55"+
    "\1\177\10\55\1\111\4\55\2\0\7\55\17\0\2\55"+
    "\1\0\2\55\1\110\4\55\1\200\10\55\1\111\4\55"+
    "\2\0\7\55\17\0\2\55\1\0\2\55\1\110\11\55"+
    "\1\201\3\55\1\111\4\55\2\0\7\55\17\0\2\55"+
    "\1\0\2\55\1\110\13\55\1\202\1\55\1\111\4\55"+
    "\2\0\7\55\17\0\2\162\1\0\3\137\15\162\1\111"+
    "\4\162\2\0\7\162\4\0\1\203\50\0\1\140\37\0"+
    "\1\140\41\0\2\66\1\0\2\66\1\67\2\66\2\170"+
    "\11\66\1\70\4\66\2\0\7\66\1\0\1\71\15\0"+
    "\2\66\1\0\2\66\1\67\5\66\1\204\7\66\1\70"+
    "\4\66\2\0\7\66\1\0\1\71\15\0\2\66\1\0"+
    "\2\66\1\67\11\66\1\205\3\66\1\70\4\66\2\0"+
    "\7\66\1\0\1\71\15\0\2\66\1\0\2\66\1\67"+
    "\13\66\1\170\1\66\1\70\4\66\2\0\7\66\1\0"+
    "\1\71\40\0\1\206\30\0\2\155\1\174\1\207\54\155"+
    "\4\0\2\55\1\0\2\55\1\110\2\55\2\201\11\55"+
    "\1\111\4\55\2\0\7\55\4\0\1\203\12\0\2\55"+
    "\1\0\2\55\1\110\5\55\1\210\7\55\1\111\4\55"+
    "\2\0\7\55\17\0\2\55\1\0\2\55\1\110\11\55"+
    "\1\211\3\55\1\111\4\55\2\0\7\55\17\0\2\55"+
    "\1\0\2\55\1\110\15\55\1\111\4\55\2\0\7\55"+
    "\4\0\1\203\12\0\2\55\1\0\2\55\1\110\13\55"+
    "\1\201\1\55\1\111\4\55\2\0\7\55\17\0\2\66"+
    "\1\0\2\66\1\67\6\66\1\170\6\66\1\70\4\66"+
    "\2\0\7\66\1\0\1\71\15\0\2\66\1\0\2\66"+
    "\1\67\1\66\1\170\13\66\1\70\4\66\2\0\7\66"+
    "\1\0\1\71\15\0\44\212\5\0\1\212\1\0\1\212"+
    "\4\0\2\55\1\0\2\55\1\110\6\55\1\201\6\55"+
    "\1\111\4\55\2\0\7\55\17\0\2\55\1\0\2\55"+
    "\1\110\1\55\1\201\13\55\1\111\4\55\2\0\7\55"+
    "\17\0\2\213\4\212\22\213\2\212\7\213\3\212\5\0"+
    "\1\212\1\0\1\212";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\2\1\1\11\2\1\1\11\4\1\4\11"+
    "\3\1\1\11\5\1\3\11\6\1\25\0\2\11\1\0"+
    "\1\11\1\0\2\1\1\0\2\1\21\0\1\11\1\0"+
    "\1\1\4\0\1\11\10\0\1\1\13\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\5\0\1\11"+
    "\3\0\1\11\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
          }
        case 28: break;
        case 4: 
          { out.write(yycharat(0));
          }
        case 29: break;
        case 10: 
          { yybegin(QSTRING);out.write("<span class=\"s\">\'");
          }
        case 30: break;
        case 11: 
          { yybegin(SCOMMENT);out.write("<span class=\"c\">#");
          }
        case 31: break;
        case 17: 
          { out.write("\\\\");
          }
        case 32: break;
        case 9: 
          { yybegin(STRING);out.write("<span class=\"s\">\"");
          }
        case 33: break;
        case 13: 
          { yybegin(YYINITIAL); out.write("\"</span>");
          }
        case 34: break;
        case 18: 
          { out.write("\\\'");
          }
        case 35: break;
        case 1: 
          { writeUnicodeChar(yycharat(0));
          }
        case 36: break;
        case 22: 
          { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
          }
        case 37: break;
        case 6: 
          { out.write( "&amp;");
          }
        case 38: break;
        case 14: 
          { yybegin(YYINITIAL); out.write("'</span>");
          }
        case 39: break;
        case 7: 
          { out.write( "&lt;");
          }
        case 40: break;
        case 26: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { yybegin(YYINITIAL); out.write(yytext()+"</span>");
    // without eol lookahead one could perhaps just use below and use yytext().trim() above ?
    //startNewLine();
          }
        case 41: break;
        case 24: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(YYINITIAL); out.write(yytext()+"</span>");
    // without eol lookahead one could perhaps just use below and use yytext().trim() above ?
    //startNewLine();
          }
        case 42: break;
        case 23: 
          { writeEMailAddress(yytext());
          }
        case 43: break;
        case 19: 
          { //we ignore keywords if the identifier starts with one of variable chars ...
    String id = yytext().substring(1);
    out.write(yytext().substring(0,1));
    writeSymbol(id, null, yyline);
          }
        case 44: break;
        case 25: 
          { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
          }
        case 45: break;
        case 3: 
          { startNewLine();
          }
        case 46: break;
        case 27: 
          { String url = yytext();
         out.write("<a href=\"");
         out.write(url);out.write("\">");
         out.write(url);out.write("</a>");
          }
        case 47: break;
        case 16: 
          { out.write("\\\"");
          }
        case 48: break;
        case 2: 
          { out.write(yytext());
          }
        case 49: break;
        case 12: 
          { yybegin(YYINITIAL); out.write("</span>");
    startNewLine();
          }
        case 50: break;
        case 20: 
          { yybegin(POD);out.write("<span class=\"c\">"+yytext());
          }
        case 51: break;
        case 8: 
          { out.write( "&gt;");
          }
        case 52: break;
        case 15: 
          { String id = yytext();
    writeSymbol(id, Consts.kwd, yyline);
          }
        case 53: break;
        case 21: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
