/* The following code was generated by JFlex 1.4.3 on 12/11/26 22:11 */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
 */

/*
 * Cross reference a Java file
 */

package org.opensolaris.opengrok.analysis.java;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/11/26 22:11 from the specification file
 * <tt>/Users/takayuki/Workspace/SourceColon/src/main/java/org/opensolaris/opengrok/analysis/java/JavaXref.lex</tt>
 */
public class JavaXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;
  public static final int SCOMMENT = 6;
  public static final int JAVADOC = 10;
  public static final int QSTRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\6\1\45"+
    "\1\52\2\6\1\51\1\46\2\52\1\47\1\37\1\6\1\10\1\11"+
    "\1\34\1\35\11\5\1\53\1\6\1\43\1\6\1\44\1\6\1\41"+
    "\1\13\1\36\1\27\1\33\1\20\1\31\1\4\1\32\1\22\1\12"+
    "\1\4\1\26\1\25\1\30\1\17\1\15\1\4\1\16\1\23\1\21"+
    "\1\40\1\14\1\42\1\24\2\4\1\52\1\50\2\52\1\7\1\52"+
    "\1\13\1\36\1\27\1\33\1\20\1\31\1\4\1\32\1\22\1\12"+
    "\1\4\1\26\1\25\1\30\1\17\1\15\1\4\1\16\1\23\1\21"+
    "\1\40\1\14\1\42\1\24\2\4\3\52\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\5\4\1\6\1\13"+
    "\2\4\1\2\2\14\1\15\2\4\1\16\2\0\1\5"+
    "\1\17\1\20\14\0\1\21\1\22\1\23\1\0\1\24"+
    "\4\0\2\5\2\0\1\5\17\0\1\2\4\25\1\26"+
    "\1\5\23\0\1\27\3\0\3\25\14\0\1\30\4\0"+
    "\1\30\1\31\1\0\3\25\7\0\1\32\3\0\3\25"+
    "\5\0\2\25\2\0\1\33\2\0\1\25\3\0\1\34"+
    "\1\0\1\25\4\0\1\34\2\0\1\34\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u0108\0\u018c\0\u01b8\0\u0108\0\u01e4\0\u0210\0\u023c"+
    "\0\u0108\0\u0108\0\u0108\0\u0108\0\u0268\0\u0294\0\u02c0\0\u02ec"+
    "\0\u0318\0\u0108\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0108"+
    "\0\u0420\0\u044c\0\u0478\0\u018c\0\u04a4\0\u04d0\0\u04fc\0\u0108"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u0268\0\u05d8\0\u0604\0\u0630"+
    "\0\u0294\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u0108\0\u0108\0\u0108"+
    "\0\u070c\0\u0108\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u0108\0\u0738\0\u0b58\0\u0b84\0\u0bb0\0\u0108"+
    "\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10"+
    "\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70"+
    "\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0"+
    "\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130"+
    "\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u0268"+
    "\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u0e9c\0\u0f78\0\u1340\0\u136c"+
    "\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc"+
    "\0\u14f8\0\u0108\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600"+
    "\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760"+
    "\0\u178c\0\u16b0\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894"+
    "\0\u17b8\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8"+
    "\0\u19f4\0\u1a20\0\u0108\0\u1a4c\0\u1a78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\2\15\22\13\1\16\1\17\1\13\1\15\1\13\1\15"+
    "\1\13\1\20\1\21\1\22\1\23\2\15\1\24\2\15"+
    "\1\7\1\10\1\11\1\12\1\25\1\26\1\15\3\26"+
    "\17\25\1\27\1\30\1\25\1\31\1\26\1\25\1\15"+
    "\1\25\1\15\1\25\1\32\1\21\1\33\2\15\1\34"+
    "\1\24\2\15\1\7\1\10\1\11\1\12\1\25\1\26"+
    "\1\15\3\26\17\25\1\27\1\30\1\25\1\31\1\26"+
    "\1\25\1\15\1\25\1\15\1\25\1\32\1\21\2\15"+
    "\1\35\1\15\1\24\2\15\1\7\1\36\1\37\1\40"+
    "\1\25\1\26\1\15\3\26\17\25\1\27\1\30\1\25"+
    "\1\31\1\26\1\25\1\15\1\25\1\15\1\25\1\32"+
    "\1\21\4\15\1\24\2\15\1\7\1\10\1\11\1\12"+
    "\1\25\1\26\1\15\3\26\17\25\1\27\1\30\1\25"+
    "\1\31\1\26\1\25\1\15\1\25\1\15\1\25\1\32"+
    "\1\21\1\15\1\41\1\15\1\42\1\24\2\15\1\7"+
    "\1\10\1\11\1\12\1\25\1\26\1\15\3\26\17\25"+
    "\1\27\1\30\1\25\1\31\1\26\1\25\1\15\1\25"+
    "\1\43\1\25\1\32\1\21\2\15\1\35\1\15\1\24"+
    "\2\15\55\0\1\10\1\11\1\12\53\0\1\12\54\0"+
    "\2\44\1\0\1\44\2\0\22\44\1\0\2\44\1\0"+
    "\1\44\1\0\1\44\16\0\1\14\3\0\1\45\6\0"+
    "\1\46\5\0\1\47\2\0\1\47\1\0\1\47\1\0"+
    "\1\14\2\0\1\47\47\0\1\50\12\0\1\51\11\0"+
    "\1\14\3\0\1\45\6\0\1\46\3\0\1\52\1\0"+
    "\1\47\2\0\1\47\1\0\1\47\1\0\1\14\2\0"+
    "\1\47\17\0\1\53\5\0\22\53\1\54\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\15\0\2\55\1\0\2\55"+
    "\1\56\22\55\1\57\2\55\1\0\1\55\1\60\1\55"+
    "\15\0\2\61\1\0\25\61\1\0\2\61\1\0\1\61"+
    "\1\60\1\61\15\0\2\55\1\0\2\55\1\56\7\55"+
    "\1\62\12\55\1\57\2\55\1\0\1\55\1\60\1\55"+
    "\15\0\2\55\1\0\2\55\1\56\7\55\1\63\12\55"+
    "\1\57\2\55\1\0\1\55\1\60\1\55\15\0\1\64"+
    "\5\0\22\64\2\0\1\64\1\0\1\64\1\0\1\64"+
    "\12\0\1\65\117\0\1\66\2\0\1\67\37\0\1\70"+
    "\20\0\1\36\1\37\1\40\53\0\1\40\51\0\1\71"+
    "\120\0\1\72\1\0\1\67\7\0\1\73\2\0\1\73"+
    "\2\0\3\73\1\74\2\73\1\75\1\76\12\73\2\0"+
    "\1\73\1\0\1\73\1\0\1\73\16\0\1\77\27\0"+
    "\1\77\23\0\1\100\2\0\1\101\24\0\1\100\1\0"+
    "\1\101\42\0\1\47\2\0\1\47\1\0\1\47\4\0"+
    "\1\47\62\0\1\102\11\0\1\103\5\0\1\103\4\0"+
    "\1\103\6\0\1\103\1\0\1\103\1\0\1\103\1\0"+
    "\2\103\21\0\2\53\1\0\2\53\1\104\22\53\1\105"+
    "\2\53\1\0\1\53\1\0\1\53\15\0\1\106\5\0"+
    "\22\106\2\0\1\106\1\0\1\106\1\0\1\106\15\0"+
    "\2\55\1\0\2\55\1\56\1\107\2\55\1\110\3\55"+
    "\1\111\1\112\1\55\1\113\2\55\1\114\2\55\1\115"+
    "\1\116\1\57\2\55\1\0\1\55\1\60\1\55\15\0"+
    "\1\117\5\0\22\117\2\0\1\117\1\0\1\117\1\0"+
    "\1\117\15\0\2\120\1\0\25\120\1\0\2\120\1\0"+
    "\1\120\1\0\1\120\15\0\2\55\1\0\2\55\1\56"+
    "\3\55\1\121\16\55\1\57\2\55\1\0\1\55\1\60"+
    "\1\55\15\0\2\55\1\0\2\55\1\56\7\55\1\122"+
    "\12\55\1\57\2\55\1\0\1\55\1\60\1\55\15\0"+
    "\2\64\1\0\25\64\1\57\2\64\1\0\1\64\1\0"+
    "\1\64\12\0\1\65\43\0\1\123\7\0\1\71\44\0"+
    "\1\123\11\0\2\124\1\0\1\124\2\0\22\124\1\0"+
    "\2\124\1\0\1\124\1\0\1\124\15\0\2\124\1\0"+
    "\1\124\2\0\1\124\1\125\20\124\1\0\2\124\1\0"+
    "\1\124\1\0\1\124\15\0\2\124\1\0\1\124\2\0"+
    "\12\124\1\126\7\124\1\0\2\124\1\0\1\124\1\0"+
    "\1\124\15\0\2\124\1\0\1\124\2\0\20\124\1\127"+
    "\1\124\1\0\2\124\1\0\1\124\1\0\1\124\16\0"+
    "\1\77\12\0\1\46\5\0\1\47\2\0\1\47\1\0"+
    "\1\47\1\0\1\77\2\0\1\47\20\0\1\100\20\0"+
    "\1\47\2\0\1\47\1\0\1\47\1\0\1\100\2\0"+
    "\1\47\20\0\1\100\27\0\1\100\16\0\34\130\1\0"+
    "\17\130\5\0\1\103\5\0\1\103\4\0\1\131\5\0"+
    "\1\47\1\103\1\0\1\103\1\0\1\103\1\0\2\103"+
    "\1\0\1\47\17\0\2\53\1\0\2\53\1\104\1\132"+
    "\2\53\1\133\3\53\1\134\1\135\1\53\1\136\2\53"+
    "\1\137\2\53\1\140\1\141\1\105\2\53\1\0\1\53"+
    "\1\0\1\53\15\0\1\142\5\0\22\142\2\0\1\142"+
    "\1\0\1\142\1\0\1\142\15\0\2\106\1\0\25\106"+
    "\1\105\2\106\1\0\1\106\1\0\1\106\15\0\2\55"+
    "\1\0\2\55\1\56\1\55\1\143\14\55\1\144\3\55"+
    "\1\57\2\55\1\0\1\55\1\60\1\55\15\0\2\55"+
    "\1\0\2\55\1\56\1\55\1\145\2\55\1\146\15\55"+
    "\1\57\2\55\1\0\1\55\1\60\1\55\15\0\2\55"+
    "\1\0\2\55\1\56\12\55\1\147\7\55\1\57\2\55"+
    "\1\0\1\55\1\60\1\55\15\0\2\55\1\0\2\55"+
    "\1\56\16\55\1\150\3\55\1\57\2\55\1\0\1\55"+
    "\1\60\1\55\15\0\2\55\1\0\2\55\1\56\13\55"+
    "\1\151\6\55\1\57\2\55\1\0\1\55\1\60\1\55"+
    "\15\0\2\55\1\0\2\55\1\56\5\55\1\152\14\55"+
    "\1\57\2\55\1\0\1\55\1\60\1\55\15\0\2\55"+
    "\1\0\2\55\1\56\7\55\1\153\12\55\1\57\2\55"+
    "\1\0\1\55\1\60\1\55\15\0\2\55\1\0\2\55"+
    "\1\56\10\55\1\154\11\55\1\57\2\55\1\0\1\55"+
    "\1\60\1\55\15\0\2\155\1\0\3\117\22\155\1\0"+
    "\2\155\1\0\1\155\1\0\1\155\15\0\2\120\1\0"+
    "\2\120\1\156\22\120\1\0\2\120\1\0\1\120\1\0"+
    "\1\120\15\0\2\55\1\0\2\55\1\56\22\55\1\57"+
    "\2\55\1\0\1\55\1\60\1\55\10\0\1\157\4\0"+
    "\2\55\1\0\2\55\1\56\3\55\1\160\16\55\1\57"+
    "\2\55\1\0\1\55\1\60\1\55\15\0\2\124\1\0"+
    "\1\124\2\0\4\124\1\161\15\124\1\0\2\124\1\0"+
    "\1\124\1\0\1\124\15\0\2\124\1\0\1\124\2\0"+
    "\15\124\1\162\4\124\1\0\2\124\1\0\1\124\1\0"+
    "\1\124\15\0\2\124\1\0\1\124\2\0\4\124\1\163"+
    "\15\124\1\0\2\124\1\0\1\124\1\0\1\124\16\0"+
    "\1\103\2\0\1\101\2\0\1\103\4\0\1\131\5\0"+
    "\1\47\1\103\1\0\1\103\1\0\1\103\1\0\2\103"+
    "\1\101\1\47\17\0\2\53\1\0\2\53\1\104\1\53"+
    "\1\164\14\53\1\165\3\53\1\105\2\53\1\0\1\53"+
    "\1\0\1\53\15\0\2\53\1\0\2\53\1\104\1\53"+
    "\1\166\2\53\1\167\15\53\1\105\2\53\1\0\1\53"+
    "\1\0\1\53\15\0\2\53\1\0\2\53\1\104\12\53"+
    "\1\170\7\53\1\105\2\53\1\0\1\53\1\0\1\53"+
    "\15\0\2\53\1\0\2\53\1\104\16\53\1\171\3\53"+
    "\1\105\2\53\1\0\1\53\1\0\1\53\15\0\2\53"+
    "\1\0\2\53\1\104\13\53\1\172\6\53\1\105\2\53"+
    "\1\0\1\53\1\0\1\53\15\0\2\53\1\0\2\53"+
    "\1\104\5\53\1\173\14\53\1\105\2\53\1\0\1\53"+
    "\1\0\1\53\15\0\2\53\1\0\2\53\1\104\7\53"+
    "\1\174\12\53\1\105\2\53\1\0\1\53\1\0\1\53"+
    "\15\0\2\53\1\0\2\53\1\104\10\53\1\175\11\53"+
    "\1\105\2\53\1\0\1\53\1\0\1\53\15\0\2\176"+
    "\1\0\3\142\22\176\1\0\2\176\1\0\1\176\1\0"+
    "\1\176\15\0\2\55\1\0\2\55\1\56\2\55\1\177"+
    "\16\55\1\200\1\57\2\55\1\0\1\55\1\60\1\55"+
    "\15\0\2\55\1\0\2\55\1\56\14\55\1\201\5\55"+
    "\1\57\2\55\1\0\1\55\1\60\1\55\15\0\2\55"+
    "\1\0\2\55\1\56\7\55\1\202\12\55\1\57\2\55"+
    "\1\0\1\55\1\60\1\55\15\0\2\55\1\0\2\55"+
    "\1\56\5\55\1\203\14\55\1\57\2\55\1\0\1\55"+
    "\1\60\1\55\15\0\2\55\1\0\2\55\1\56\7\55"+
    "\1\200\12\55\1\57\2\55\1\0\1\55\1\60\1\55"+
    "\15\0\2\55\1\0\2\55\1\56\10\55\1\200\11\55"+
    "\1\57\2\55\1\0\1\55\1\60\1\55\15\0\2\55"+
    "\1\0\2\55\1\56\14\55\1\200\5\55\1\57\2\55"+
    "\1\0\1\55\1\60\1\55\15\0\2\55\1\0\2\55"+
    "\1\56\16\55\1\204\3\55\1\57\2\55\1\0\1\55"+
    "\1\60\1\55\15\0\2\55\1\0\2\55\1\56\13\55"+
    "\1\205\6\55\1\57\2\55\1\0\1\55\1\60\1\55"+
    "\15\0\2\55\1\0\2\55\1\56\17\55\1\204\2\55"+
    "\1\57\2\55\1\0\1\55\1\60\1\55\15\0\2\155"+
    "\1\0\3\117\22\155\1\57\2\155\1\0\1\155\1\0"+
    "\1\155\15\0\2\206\1\0\25\206\1\0\2\206\1\0"+
    "\1\206\1\0\1\206\45\0\1\207\23\0\2\55\1\0"+
    "\2\55\1\56\11\55\1\121\10\55\1\57\2\55\1\0"+
    "\1\55\1\60\1\55\10\0\1\157\4\0\2\124\1\0"+
    "\1\124\2\0\1\124\1\210\20\124\1\0\2\124\1\0"+
    "\1\124\1\0\1\124\15\0\2\124\1\0\1\124\2\0"+
    "\6\124\1\211\13\124\1\0\2\124\1\0\1\124\1\0"+
    "\1\124\15\0\2\124\1\0\1\124\2\0\5\124\1\212"+
    "\14\124\1\0\2\124\1\0\1\124\1\0\1\124\15\0"+
    "\2\53\1\0\2\53\1\104\2\53\1\213\16\53\1\214"+
    "\1\105\2\53\1\0\1\53\1\0\1\53\15\0\2\53"+
    "\1\0\2\53\1\104\14\53\1\215\5\53\1\105\2\53"+
    "\1\0\1\53\1\0\1\53\15\0\2\53\1\0\2\53"+
    "\1\104\7\53\1\216\12\53\1\105\2\53\1\0\1\53"+
    "\1\0\1\53\15\0\2\53\1\0\2\53\1\104\5\53"+
    "\1\217\14\53\1\105\2\53\1\0\1\53\1\0\1\53"+
    "\15\0\2\53\1\0\2\53\1\104\7\53\1\214\12\53"+
    "\1\105\2\53\1\0\1\53\1\0\1\53\15\0\2\53"+
    "\1\0\2\53\1\104\10\53\1\214\11\53\1\105\2\53"+
    "\1\0\1\53\1\0\1\53\15\0\2\53\1\0\2\53"+
    "\1\104\14\53\1\214\5\53\1\105\2\53\1\0\1\53"+
    "\1\0\1\53\15\0\2\53\1\0\2\53\1\104\16\53"+
    "\1\220\3\53\1\105\2\53\1\0\1\53\1\0\1\53"+
    "\15\0\2\53\1\0\2\53\1\104\13\53\1\221\6\53"+
    "\1\105\2\53\1\0\1\53\1\0\1\53\15\0\2\53"+
    "\1\0\2\53\1\104\17\53\1\220\2\53\1\105\2\53"+
    "\1\0\1\53\1\0\1\53\15\0\2\176\1\0\3\142"+
    "\22\176\1\105\2\176\1\0\1\176\1\0\1\176\1\0"+
    "\1\222\13\0\2\55\1\0\2\55\1\56\1\55\1\200"+
    "\20\55\1\57\2\55\1\0\1\55\1\60\1\55\15\0"+
    "\2\55\1\0\2\55\1\56\3\55\1\200\16\55\1\57"+
    "\2\55\1\0\1\55\1\60\1\55\15\0\2\55\1\0"+
    "\2\55\1\56\15\55\1\223\4\55\1\57\2\55\1\0"+
    "\1\55\1\60\1\55\15\0\2\55\1\0\2\55\1\56"+
    "\3\55\1\224\16\55\1\57\2\55\1\0\1\55\1\60"+
    "\1\55\15\0\2\55\1\0\2\55\1\56\17\55\1\200"+
    "\2\55\1\57\2\55\1\0\1\55\1\60\1\55\45\0"+
    "\1\225\23\0\2\124\1\0\1\124\2\0\13\124\1\226"+
    "\6\124\1\0\2\124\1\0\1\124\1\0\1\124\15\0"+
    "\2\124\1\0\1\124\2\0\3\124\1\227\16\124\1\0"+
    "\2\124\1\0\1\124\1\0\1\124\15\0\2\124\1\0"+
    "\1\124\2\0\22\124\1\0\2\124\1\0\1\124\1\0"+
    "\1\230\15\0\2\53\1\0\2\53\1\104\1\53\1\214"+
    "\20\53\1\105\2\53\1\0\1\53\1\0\1\53\15\0"+
    "\2\53\1\0\2\53\1\104\22\53\1\105\2\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\222\13\0\2\53\1\0"+
    "\2\53\1\104\3\53\1\214\16\53\1\105\2\53\1\0"+
    "\1\53\1\0\1\53\15\0\2\53\1\0\2\53\1\104"+
    "\15\53\1\231\4\53\1\105\2\53\1\0\1\53\1\0"+
    "\1\53\15\0\2\53\1\0\2\53\1\104\3\53\1\232"+
    "\16\53\1\105\2\53\1\0\1\53\1\0\1\53\15\0"+
    "\2\53\1\0\2\53\1\104\17\53\1\214\2\53\1\105"+
    "\2\53\1\0\1\53\1\0\1\53\15\0\2\53\1\0"+
    "\2\53\1\104\14\53\1\214\5\53\1\105\2\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\222\13\0\2\55\1\0"+
    "\2\55\1\56\20\55\1\200\1\55\1\57\2\55\1\0"+
    "\1\55\1\60\1\55\15\0\2\55\1\0\2\55\1\56"+
    "\6\55\1\233\2\55\1\200\10\55\1\57\2\55\1\0"+
    "\1\55\1\60\1\55\15\0\37\234\4\0\3\234\1\0"+
    "\1\234\1\0\1\235\2\0\2\124\1\0\1\124\2\0"+
    "\22\124\1\0\2\124\1\0\1\124\1\0\1\124\15\0"+
    "\2\124\1\0\1\124\2\0\7\124\1\236\12\124\1\0"+
    "\2\124\1\0\1\124\1\0\1\124\15\0\2\124\1\0"+
    "\1\124\2\0\11\124\1\237\10\124\1\0\2\124\1\0"+
    "\1\124\1\0\1\124\15\0\2\53\1\0\2\53\1\104"+
    "\20\53\1\214\1\53\1\105\2\53\1\0\1\53\1\0"+
    "\1\53\15\0\2\53\1\0\2\53\1\104\6\53\1\240"+
    "\2\53\1\214\10\53\1\105\2\53\1\0\1\53\1\0"+
    "\1\53\15\0\2\55\1\0\2\55\1\56\4\55\1\241"+
    "\15\55\1\57\2\55\1\0\1\55\1\60\1\55\15\0"+
    "\2\242\4\234\25\242\1\234\1\242\1\234\1\242\4\0"+
    "\3\234\1\0\1\234\1\0\1\235\2\0\1\243\2\0"+
    "\1\243\2\0\22\243\2\0\1\243\1\0\1\243\1\0"+
    "\1\243\1\244\14\0\2\124\1\0\1\124\2\0\10\124"+
    "\1\245\11\124\1\0\2\124\1\0\1\124\1\0\1\124"+
    "\12\0\1\246\2\0\2\124\1\0\1\124\2\0\22\124"+
    "\1\0\2\124\1\0\1\124\1\0\1\124\15\0\2\53"+
    "\1\0\2\53\1\104\4\53\1\247\15\53\1\105\2\53"+
    "\1\0\1\53\1\0\1\53\15\0\2\55\1\0\2\55"+
    "\1\56\7\55\1\250\12\55\1\57\2\55\1\0\1\55"+
    "\1\60\1\55\15\0\2\251\1\0\1\251\2\0\22\251"+
    "\1\0\2\251\1\0\1\251\1\0\1\251\15\0\1\252"+
    "\2\0\1\252\2\0\22\252\2\0\1\252\1\0\1\252"+
    "\1\0\1\252\15\0\2\124\1\0\1\124\2\0\5\124"+
    "\1\253\14\124\1\0\2\124\1\0\1\124\1\0\1\124"+
    "\12\0\1\246\2\0\1\254\2\0\1\254\2\0\22\254"+
    "\2\0\1\254\1\0\1\254\1\0\1\254\15\0\2\53"+
    "\1\0\2\53\1\104\7\53\1\255\12\53\1\105\2\53"+
    "\1\0\1\53\1\0\1\53\15\0\2\55\1\0\2\55"+
    "\1\56\10\55\1\256\11\55\1\57\2\55\1\0\1\55"+
    "\1\60\1\55\15\0\2\257\1\0\1\257\2\0\22\257"+
    "\1\0\2\257\1\0\1\257\1\0\1\257\15\0\2\124"+
    "\1\0\1\124\2\0\16\124\1\237\3\124\1\0\2\124"+
    "\1\0\1\124\1\0\1\124\15\0\2\260\1\0\1\260"+
    "\2\0\22\260\1\0\2\260\1\0\1\260\1\0\1\260"+
    "\15\0\2\53\1\0\2\53\1\104\10\53\1\261\11\53"+
    "\1\105\2\53\1\0\1\53\1\0\1\53\15\0\2\55"+
    "\1\0\2\55\1\56\6\55\1\262\13\55\1\57\2\55"+
    "\1\0\1\55\1\60\1\55\15\0\2\257\1\0\1\257"+
    "\2\0\22\257\1\0\2\257\1\0\1\257\1\0\1\257"+
    "\1\0\1\263\13\0\2\260\1\0\1\260\1\0\1\264"+
    "\22\260\1\0\2\260\1\0\1\260\1\0\1\260\15\0"+
    "\2\53\1\0\2\53\1\104\6\53\1\265\13\53\1\105"+
    "\2\53\1\0\1\53\1\0\1\53\15\0\2\55\1\0"+
    "\2\55\1\56\11\55\1\200\10\55\1\57\2\55\1\0"+
    "\1\55\1\60\1\55\15\0\1\254\2\0\1\254\2\0"+
    "\22\254\2\0\1\254\1\0\1\254\1\0\1\254\15\0"+
    "\2\53\1\0\2\53\1\104\11\53\1\214\10\53\1\105"+
    "\2\53\1\0\1\53\1\0\1\53\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6820];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\2\1\1\11\3\1\4\11"+
    "\5\1\1\11\5\1\1\11\4\1\2\0\1\1\1\11"+
    "\1\1\14\0\3\11\1\0\1\11\4\0\2\1\2\0"+
    "\1\1\17\0\1\11\4\1\1\11\1\1\23\0\1\1"+
    "\3\0\3\1\14\0\1\1\4\0\2\1\1\0\3\1"+
    "\7\0\1\11\3\0\3\1\5\0\2\1\2\0\1\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\4\0\1\1"+
    "\2\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /* Must match WhiteSpace regex */
  private final static String WHITE_SPACE = "[ \t\f\r]+";

  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
          }
        case 29: break;
        case 4: 
          { out.write(yycharat(0));
          }
        case 30: break;
        case 9: 
          { yybegin(QSTRING);out.write("<span class=\"s\">\'");
          }
        case 31: break;
        case 21: 
          { out.append("<strong>").append(yytext()).append("</strong>");
          }
        case 32: break;
        case 18: 
          { out.write("\\\\");
          }
        case 33: break;
        case 8: 
          { yybegin(STRING);out.write("<span class=\"s\">\"");
          }
        case 34: break;
        case 11: 
          { yybegin(YYINITIAL); out.write("\"</span>");
          }
        case 35: break;
        case 20: 
          { out.write("\\\'");
          }
        case 36: break;
        case 1: 
          { writeUnicodeChar(yycharat(0));
          }
        case 37: break;
        case 24: 
          { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
          }
        case 38: break;
        case 10: 
          { out.write( "&amp;");
          }
        case 39: break;
        case 13: 
          { yybegin(YYINITIAL); out.write("'</span>");
          }
        case 40: break;
        case 6: 
          { out.write( "&lt;");
          }
        case 41: break;
        case 25: 
          { writeEMailAddress(yytext());
          }
        case 42: break;
        case 26: 
          { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
          }
        case 43: break;
        case 3: 
          { startNewLine();
          }
        case 44: break;
        case 27: 
          { String url = yytext();
         out.write("<a href=\"");
         out.write(url);out.write("\">");
         out.write(url);out.write("</a>");
          }
        case 45: break;
        case 17: 
          { out.write("\\\"");
          }
        case 46: break;
        case 15: 
          { yybegin(SCOMMENT);out.write("<span class=\"c\">//");
          }
        case 47: break;
        case 22: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { yybegin(JAVADOC);out.write("<span class=\"c\">/**");
          }
        case 48: break;
        case 16: 
          { yybegin(COMMENT);out.write("<span class=\"c\">/*");
          }
        case 49: break;
        case 2: 
          { out.write(yytext());
          }
        case 50: break;
        case 12: 
          { yybegin(YYINITIAL); out.write("</span>");
    startNewLine();
          }
        case 51: break;
        case 19: 
          { yybegin(YYINITIAL); out.write("*/</span>");
          }
        case 52: break;
        case 7: 
          { out.write( "&gt;");
          }
        case 53: break;
        case 14: 
          { String id = yytext();
    writeSymbol(id, Consts.kwd, yyline);
          }
        case 54: break;
        case 23: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 55: break;
        case 28: 
          { String text = yytext();
    String[] tokens = text.split(WHITE_SPACE, 2);
    out.append("<strong>").append(tokens[0]).append("</strong>")
      .append(text.substring(tokens[0].length(),
                             text.length() - tokens[1].length()))
      .append("<em>").append(tokens[1]).append("</em>");
          }
        case 56: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
