<?xml version="1.0" encoding="UTF-8"?>
<!-- 

CDDL HEADER START

The contents of this file are subject to the terms of the
Common Development and Distribution License (the "License").  
You may not use this file except in compliance with the License.

See LICENSE.txt included in this distribution for the specific
language governing permissions and limitations under the License.

When distributing Covered Code, include this CDDL HEADER in each
file and include the License file at LICENSE.txt.
If applicable, add the following below this CDDL HEADER, with the
fields enclosed by brackets "[]" replaced with your own identifying
information: Portions Copyright [yyyy] [name of copyright owner]

CDDL HEADER END

Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.

-->
<project name="OpenGrok" default="jar" basedir=".">
    <description>Builds, tests, and runs the project opengrok.</description>
    <property name="build.sysclasspath" value="ignore"/>
    <property file="${user.home}/config/ant/${ant.project.name}.properties" />
    <property file="${user.home}/config/ant/global.properties" />
    <property file="/local/share/javax/global.properties" />

    <import file="nbproject/build-impl.xml"/>

    <import file="nbproject/profiler-build-impl.xml"/>    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="opengrok-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

    <property name="version" value="0.11.1"/>
    <property name="distname" value="opengrok"/>
    <property name="src.dir" location="src"/>
    <property name="src.generatedsrc.dir" location="generatedsrc"/>

    <property name="test.repositories" value="testdata/repositories"/>
    <property name="test.sources" value="testdata/sources"/>
    <property name="test.cvs" value="${test.repositories}/cvs"/>
    <property name="test.cvs.repo" value="${test.cvs}/cvsrepo"/>
    <property name="test.cvs.root" value="${test.cvs}/cvsroot"/>
    <property name="test.hg" value="${test.repositories}/mercurial"/>
    <property name="test.svn" value="${test.repositories}/svn"/>
    <property name="test.razor" value="${test.repositories}/razor"/>

    <available property="compileSystrayClient" classname="java.awt.TrayIcon"/>

    <target name="-exclude-client" unless="compileSystrayClient">	    
        <echo>JDK doesn't have java.awt.TrayIcon, excluding building of systray client ... </echo>
        <property name="excludes" value="org/opensolaris/opengrok/management/client/**"/> 
    </target>
    
                 
    <path id="lib.search.path">
        <pathelement path="${user.home}/.ant/lib"/>
        <pathelement path="${java.class.path}"/>
        <pathelement path="lib"/>
        <pathelement path="../lib"/>
    </path>

    <available file="JFlex.jar" type="file" property="JFlex.present">
        <filepath refid="lib.search.path"/>
    </available>
    <fail unless="JFlex.present" message="Please download JFlex (http://jflex.de/) and put JFlex.jar it into ./lib directory (or in ant classpath)."/>

    <taskdef classname="JFlex.anttask.JFlexTask" name="jflex" classpathref="lib.search.path"/>
    <target name="jflex">
        <mkdir dir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/plain/PlainXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/c/CSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/c/CXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/c/CxxSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/c/CxxXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/fortran/FortranSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/fortran/FortranXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/java/JavaSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/java/JavaXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/javascript/JavaScriptSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/javascript/JavaScriptXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/python/PythonSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/python/PythonXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/perl/PerlSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/perl/PerlXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/php/PhpSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/php/PhpXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/lisp/LispSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/lisp/LispXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/tcl/TclSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/tcl/TclXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/plain/PlainFullTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/plain/PlainSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/plain/PlainXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/plain/XMLXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/sql/SQLXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/document/TroffXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/document/TroffFullTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/sh/ShSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/sh/ShXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/vb/VBSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/vb/VBXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/csharp/CSharpSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/csharp/CSharpXref.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/search/context/HistoryLineTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
        <jflex file="${src.dir}/org/opensolaris/opengrok/search/context/PlainLineTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
    </target>

    <!-- Get the id of the changeset we're building from by reading
         .hg_archival.txt file created by hg archive. This will only
         be used when we're not building from a checked out copy of
         the repository, for example the source distribution.
      -->
    <target name="-get-changeset-from-file"
             unless="build.from.repo">
    </target>

    <target name="-update-build-info"
            depends="-get-changeset-from-file">
        <mkdir dir="${build.classes.dir}/org/opensolaris/opengrok"/>
        <propertyfile
            file="${build.classes.dir}/org/opensolaris/opengrok/info.properties">
            <entry  key="version" value="${version}"/>
            <entry  key="changeset" value="${changeset}"/>
        </propertyfile>        
    </target>
        
    <property name="coverage.dir" value="${basedir}/coverage"/>
    <target name="-pre-compile" depends="jrcs,jflex"/>
    <target name="-post-clean">
        <delete dir="${src.generatedsrc.dir}"/>
        <delete file="${manifest.file}"/>
        <delete dir="${coverage.dir}"/>
        <antcall target="-delete-generated-repository-files"/>
    </target>

    <!--
        Create an empty manifest file so that nbproject/build-impl.xml
        notices that a manifest should be added to the jar file
      -->
    <target name="-touch-manifest">
      <!-- no attributes, main-class and class-path will be added later -->
        <manifest file="manifest.mf" mode="replace"/>
    </target>

    <target name="-pre-init" depends="-touch-manifest, -exclude-client"/>

    <!--
        Initialize a property holding a list of jar files on which
        opengrok.jar depends
      -->
    <target name="-post-init">
        <pathconvert property="opengrok.lib.files" pathsep=" ">
            <path>
                <pathelement path="${javac.classpath}"/>
            </path>
            <flattenmapper/>
            <map from="" to="lib/"/>
        </pathconvert>
    </target>

    <!-- Update the manifest file with a classpath attribute -->
    <target name="-update-manifest-classpath">
        <manifest file="${manifest.file}" mode="update">
            <attribute name="Class-Path"
                   value="${opengrok.lib.files} lib/derbyclient.jar lib/derby.jar"/>
        </manifest>
    </target>

    <target name="-pre-jar" depends="-update-manifest-classpath,-update-build-info"/>

    <!--
        Copy the jars from lib to dist/lib manually if we don't have
        the copylibs task from NetBeans
      -->
    <target name="-copy-lib-without-netbeans"
            unless="manifest.available+main.class+mkdist.available">
        <copy todir="${dist.dir}/lib">
            <fileset file="${file.reference.ant.jar}"/>
        </copy>
        <copy todir="${dist.dir}">
            <fileset dir="." includes="${opengrok.lib.files}"/>
        </copy>
    </target>

    <target name="-post-jar" depends="-copy-lib-without-netbeans">
        <war destfile="${dist.war}" webxml="web/WEB-INF/web.xml">
            <fileset dir="web" excludes="META-INF/context.xml"/>
            <lib dir="${dist.dir}" includes="opengrok.jar"/>
            <lib dir="${dist.dir}/lib" includes="*.jar" excludes="servlet-api.jar"/>
        </war>
        <echo message="Generating man page.."/>
        <java classname="org.opensolaris.opengrok.index.CommandLineOptions" 
              output="${dist.dir}/opengrok.1" failonerror="true" fork="true">
            <classpath>
                <pathelement location="dist/opengrok.jar"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
    </target>

    <target name="package" depends="jar">
        <exec os="SunOS" executable="/usr/bin/pkgmk" failonerror="true">
            <arg line="-o -d build -r . -v ${version} -f platform/solaris/pkgdef/prototype"/>
        </exec>
        <exec os="SunOS" executable="/usr/bin/pkgtrans" failonerror="true">
            <arg line="-s build ../dist/OSOLopengrok-${version}.pkg OSOLopengrok"/>
        </exec>
    </target>

    <target name="dist" depends="jar">
        <tar destfile="${dist.dir}/${distname}-${version}.tar.gz"
           compression="gzip">
            <tarfileset dir="." prefix="${distname}-${version}/doc">
                <include name="README.txt"/>
                <include name="LICENSE.txt"/>
                <include name="NOTICE.txt"/>
                <include name="paths.tsv"/>
                <include name="logging.properties"/>
            </tarfileset>
            <tarfileset dir="." prefix="${distname}-${version}/bin" mode="755">
                <include name="OpenGrok"/>
            </tarfileset>
            <tarfileset dir="doc" prefix="${distname}-${version}/doc">
                <include name="EXAMPLE.txt"/>
            </tarfileset>
            <tarfileset dir="${dist.dir}" prefix="${distname}-${version}/lib">
                <include name="opengrok.jar"/>
                <include name="source.war"/>
                <include name="lib/*"/>
                <exclude name="lib/servlet-api.jar"/>
            </tarfileset>
            <tarfileset dir="${dist.dir}" prefix="${distname}-${version}/man/man1">
                <include name="opengrok.1"/>
            </tarfileset>
        </tar>
    </target>

    <target name="dist-src" depends="init">
        <mkdir dir="${dist.dir}"/>
        <exec executable="hg">
            <arg value="archive"/>
            <arg value="-t"/>
            <arg value="tgz"/>
<!--	<arg value="-p"/>
	<arg value="${distname}-${version}-src"/> -->
            <arg value="${dist.dir}/${distname}-${version}-src.tar.gz"/>
        </exec>
    </target>

    <target name="-post-compile-test">
        <zip destfile="${build.test.classes.dir}/org/opensolaris/opengrok/index/source.zip"
              basedir="${test.sources}"
              update="false"
              defaultexcludes="no"/>
        <zip destfile="${build.test.classes.dir}/org/opensolaris/opengrok/history/repositories.zip" 
                basedir="${test.repositories}"
                excludes="mercurial/hg/**, mercurial/hgignore"
                update="false"
                defaultexcludes="no"/>

        <antcall target="-delete-generated-repository-files"/>
    </target>

    <!-- clean up generated test repositories -->
    <target name="-delete-generated-repository-files">
    </target>

    <!-- Generate HTML test report -->
    <target depends="init" name="test-report">
        <junitreport todir="${build.test.results.dir}">
            <fileset dir="${build.test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${build.test.results.dir}"/>
        </junitreport>
    </target>

    <!-- Build our patched JRCS library. -->
    <target name="jrcs" depends="-pre-pre-compile">
        <mkdir dir="${build.dir}/jrcs"/>
        <javac srcdir="jrcs/src" destdir="${build.dir}/jrcs"
             nowarn="on" source="1.4"/>
        <jar destfile="${file.reference.jrcs.jar}">
            <fileset dir="${build.dir}/jrcs" includes="**/*.class"/>
        </jar>
    </target>


	<!-- compile jsp - just to test -->
    <property name="debug" value="on" />
    <property name="jsdebug" value="off" />
    <property name="compress" value=".gz" />
    <property name="debuglevel" value="source,lines,vars" />
    <property name="optimize" value="on" />
    <property name="deprecation" value="on" />
    <property name="listfiles" value="true" />

    <property name="codebase"   	value="org/opensolaris/opengrok"/>
    <property name="codebase.dot"   value="org.opensolaris.opengrok"/>
    <property name="web.src.dir" location="web" />
	
    <patternset id="libs">
        <include name="*.jar" />
    </patternset>
    <path id="classpath.base">
        <fileset dir="lib">
            <patternset refid="libs" />
        </fileset>
    </path>

    <target name="-jsp.check" depends="init">
        <mkdir dir="${build.dir}/src/jsp/${codebase}/jsp" />
        <uptodate property="jsp.not.changed">
            <srcfiles dir="${web.src.dir}" includes="**/*.jsp,**/*.jspf"/>
            <mapper type="glob" from="*.jsp" 
				to="${build.dir}/src/jsp/${codebase}/jsp/*_jsp.java"/>
        </uptodate>
    </target>


    <target name="all" depends="clean,jar,test,javadoc" />
</project>
